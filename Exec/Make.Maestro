MAESTROEX_HOME ?= /home/fanduomi/CCSE/MAESTROeX

TOP := $(MAESTROEX_HOME)

# Microphysics is a git submodule of MAESTROeX. By default
# we assume it is in the external/ directory.
# The user may override this with their own installation
# of Microphysics as long as they set the environment variable
# MICROPHYSICS_HOME.

MICROPHYSICS_HOME ?= $(TOP)/external/Microphysics

# AMReX is a git submodule of MAESTROeX. By default
# we assume it is in the external/ directory.
# The user may override this with their own installation
# of AMReX as long as they set the environment variable
# AMREX_HOME.

AMREX_HOME ?= $(TOP)/external/amrex

# Require C++17
CXXSTD := c++17

# Check to make sure that Microphysics actually exists,
# using an arbitrary file that must exist to check.
# Throw an error if we don't have Microphysics.
ifeq ("$(wildcard $(MICROPHYSICS_HOME)/Make.Microphysics)","")
  $(error Microphysics has not been downloaded. Please run "git submodule update --init" from the top level of the code)
endif

# default microphysics locations
EOS_HOME     ?= $(MICROPHYSICS_HOME)/EOS
NETWORK_HOME ?= $(MICROPHYSICS_HOME)/networks
CONDUCTIVITY_HOME    ?= $(MICROPHYSICS_HOME)/conductivity

INTEGRATOR_DIR ?= VODE

EBASE := Maestro

# EXTERN_CORE is simply a list of the directories we use in EOS,
# Networks and Util this list will be searched for runtime parameters
EXTERN_CORE ?=

# need to put any build suffices before Make.defs
ifeq ($(USE_SDC), TRUE)
  USERSuffix = .SDC
endif

ifeq ($(USE_CUDA),TRUE)
  USE_GPU_PRAGMA = TRUE
  DEFINES += -DCUDA
endif

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

MAESTROEX_AUTO_SOURCE_DIR := $(TmpBuildDir)/maestroex_sources/$(optionsSuffix).EXE

all: $(executable)
	@echo SUCCESS

# Maestro uses a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

# Maestro needs to compute additional thermodynamic derivatives in the EOS
DEFINES += -DEXTRA_THERMO

USE_MG = FALSE

ifeq ($(DIM), 1)
    $(error MAESTROeX requires DIM >= 2)
endif

#------------------------------------------------------------------------------
# Maestro directories
#------------------------------------------------------------------------------

Bdirs 	:= Source \
           Source/Src_nd \
           constants \
           Util/model_parser \
           Util/simple_log \
           Util/utils

# add / define any special physics we need
#
#

Bpack	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir)/Make.package)
Blocs   += $(foreach dir, $(Bdirs), $(TOP)/$(dir))

ifeq ($(USE_ROTATION), TRUE)
  DEFINES += -DROTATION
endif

#------------------------------------------------------------------------------
# AMReX
#------------------------------------------------------------------------------

# core AMReX directories -- note the Make.package for these adds these
# directories into VPATH_LOCATIONS and INCLUDE_LOCATIONS for us, so we
# don't need to do it here

Pdirs 	:= Base Boundary AmrCore LinearSolvers/MLMG

Bpack	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

#------------------------------------------------------------------------------
# microphysics
#------------------------------------------------------------------------------

# Specify that we want to write any automatically generated network
# file (including the general_null network) to our temporary build
# directory
NETWORK_OUTPUT_PATH = $(MAESTROEX_AUTO_SOURCE_DIR)

USE_CONDUCTIVITY := TRUE

USE_CXX_EOS := TRUE

USE_CXX_REACTIONS := TRUE

ifeq ($(USE_REACT), TRUE)
  DEFINES += -DREACTIONS
  ifeq ($(USE_SDC), TRUE)
    # we need the compositional derivatives for SDC
    DEFINES += -DEXTRA_THERMO
   endif
endif
      
# Maestro SDC uses the SDC_EVOLVE_ENTHALPY mode in StarKiller Microphysics
ifeq ($(USE_SDC), TRUE)
  USE_SIMPLIFIED_SDC = TRUE
  DEFINES += -DSDC -DPRIM_SPECIES_HAVE_SOURCES -DSDC_EVOLVE_ENTHALPY
endif
      
include $(MICROPHYSICS_HOME)/Make.Microphysics_extern

Bpack += $(foreach dir, $(EXTERN_CORE), $(dir)/Make.package)
Blocs += $(foreach dir, $(EXTERN_CORE), $(dir))


#------------------------------------------------------------------------------
# external libraries
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# include all of the necessary directories
#------------------------------------------------------------------------------

include $(Bpack)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

#include $(AMREX_HOME)/Src/LinearSolvers/C_to_F_MG/Make.package
#include $(AMREX_HOME)/Src/LinearSolvers/F_MG/FParallelMG.mak
#include $(AMREX_HOME)/Src/F_BaseLib/FParallelMG.mak


#------------------------------------------------------------------------------
# make generated source files location
#------------------------------------------------------------------------------
VPATH_LOCATIONS += $(MAESTROEX_AUTO_SOURCE_DIR)
INCLUDE_LOCATIONS += $(MAESTROEX_AUTO_SOURCE_DIR)


#------------------------------------------------------------------------------
# runtime parameters
#------------------------------------------------------------------------------

# runtime parameter support for extern/ routines
F90EXE_sources += extern.F90
CEXE_sources += extern_parameters.cpp
FEXE_headers += extern_parameters_F.H
CEXE_headers += extern_parameters.H

# these are for finding runtime parameters
EXTERN_SEARCH += $(EXTERN_CORE) $(TOP)/constants $(TOP)/Util/model_parser
ifdef MICROPHYSICS_HOME
   EXTERN_SEARCH += $(MICROPHYSICS_HOME)/networks/
endif
EXTERN_PARAMETERS := $(foreach dir, $(EXTERN_SEARCH),$(realpath $(wildcard $(dir)/_parameters)))

PROBIN_TEMPLATE := $(MAESTROEX_HOME)/Source/param/runtime.probin.template
PROBIN_PARAMETER_DIRS += .
PROBIN_PARAMETERS := $(foreach dir, $(PROBIN_PARAMETER_DIRS),$(realpath $(wildcard $(dir)/_parameters)))

ifdef USE_CUDA
  ifeq ($(USE_CUDA), TRUE)
    USE_GPU_PRAGMA = TRUE
    DEFINES += -DCUDA
  endif
endif

$(MAESTROEX_AUTO_SOURCE_DIR)/extern_parameters.cpp: $(MAESTROEX_AUTO_SOURCE_DIR)/extern.F90

$(MAESTROEX_AUTO_SOURCE_DIR)/extern.F90: $(PROBIN_PARAMETERS) $(PROBIN_TEMPLATE)
	@if [ ! -d $(MAESTROEX_AUTO_SOURCE_DIR) ]; then mkdir -p $(MAESTROEX_AUTO_SOURCE_DIR); fi
	@echo " "
	@echo "${bold}WRITING extern.F90${normal}"
	$(MICROPHYSICS_HOME)/util/build_scripts/write_probin.py --with_fortran \
          -t $(PROBIN_TEMPLATE) -o $(MAESTROEX_AUTO_SOURCE_DIR)/extern.F90 -n probin \
          --pa "$(PROBIN_PARAMETERS) $(EXTERN_PARAMETERS)" \
          --cxx_prefix $(MAESTROEX_AUTO_SOURCE_DIR)/extern
	@echo " "

#------------------------------------------------------------------------------
# MAESTROeX C++ parameters
#------------------------------------------------------------------------------

CPP_PARAMETERS := $(TOP)/Source/param/_cpp_parameters
METH_PARAMS_TEMPLATE := $(TOP)/Source/param/meth_params.template

$(MAESTROEX_AUTO_SOURCE_DIR)/meth_params.F90: $(CPP_PARAMETERS) $(METH_PARAMS_TEMPLATE)
	@if [ ! -d $(MAESTROEX_AUTO_SOURCE_DIR) ]; then mkdir -p $(MAESTROEX_AUTO_SOURCE_DIR); fi
	PYTHONPATH=$(MICROPHYSICS_HOME)/util/build_scripts $(TOP)/Source/param/parse_maestro_params.py -m $(METH_PARAMS_TEMPLATE) -o $(MAESTROEX_AUTO_SOURCE_DIR) $(CPP_PARAMETERS)

# for debugging
test_cxx_params: $(MAESTROEX_AUTO_SOURCE_DIR)/meth_params.F90

#------------------------------------------------------------------------------
# state variable info
#-------------------------------------------------------------------------------

$(MAESTROEX_AUTO_SOURCE_DIR)/state_indices.H: $(MAESTROEX_AUTO_SOURCE_DIR)/state_indices_nd.F90
	echo "state_indices.H will be generated at the same time as state_indices_nd.F90"

$(MAESTROEX_AUTO_SOURCE_DIR)/state_indices_nd.F90:
	$(MAESTROEX_HOME)/Source/param/set_variables.py \
           --defines "$(DEFINES)" \
           --odir $(MAESTROEX_AUTO_SOURCE_DIR) \
           $(MAESTROEX_HOME)/Source/param/_variables

# for debugging
test_variables: $(MAESTROEX_AUTO_SOURCE_DIR)/state_indices_nd.F90


#------------------------------------------------------------------------------
# build info
#------------------------------------------------------------------------------

# job_info support
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts


MNAMES := EOS=$(EOS_PATH) NETWORK=$(NETWORK_PATH)
MNAMES += CONDUCTIVITY=$(CONDUCTIVITY_PATH)

# we make AMReX_buildInfo.cpp as we make the .o file, so we can delete
# it immediately.  this way if the build is interrupted, we are
# guaranteed to remake it

objForExecs += $(objEXETempDir)/AMReX_buildInfo.o

.FORCE:
.PHONE: .FORCE

# set BUILD_GIT_NAME and BUILD_GIT_DIR if you are building in a
# git-controlled dir not under MAESTROEX/
EXTRA_BUILD_INFO :=
ifdef BUILD_GIT_NAME
   EXTRA_BUILD_INFO := --build_git_name "$(BUILD_GIT_NAME)" \
                       --build_git_dir "$(BUILD_GIT_DIR)"
endif

$(objEXETempDir)/AMReX_buildInfo.o: .FORCE
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --CXX_comp_name "$(CXX)" --CXX_flags "$(CXXFLAGS) $(CPPFLAGS) $(includes)" \
          --F_comp_name "$(F90)" --F_flags "$(F90FLAGS)" \
          --link_flags "$(LDFLAGS)" --libraries "$(libraries)" \
          --MODULES "$(MNAMES)" $(EXTRA_BUILD_INFO) \
          --GIT "$(TOP) $(AMREX_HOME) $(MICROPHYSICS_HOME)"
	$(SILENT) $(CCACHE) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(CXXEXEFLAGS) AMReX_buildInfo.cpp -o $(objEXETempDir)/AMReX_buildInfo.o
	$(SILENT) $(RM) AMReX_buildInfo.cpp


#------------------------------------------------------------------------------
# finish up
#------------------------------------------------------------------------------

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

ifeq ($(USE_CUDA),TRUE)
ifeq ($(USE_GPU_PRAGMA), TRUE)

include $(TOP)/Exec/Make.cuda_rules

endif
endif

clean::
	$(SILENT) $(RM) extern.F90 extern.f90 extern_parameters.cpp extern_parameters_F.H extern_parameters.H
	$(SILENT) $(RM) AMReX_buildInfo.cpp
	$(SILENT) $(RM) $(MAESTROEX_AUTO_SOURCE_DIR)/*.H $(MAESTROEX_AUTO_SOURCE_DIR)/*.[fF]90

clean::
	@if [ -L helm_table.dat ]; then rm -f helm_table.dat; fi


# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will print out the
# value.

print-%::
	@echo "$* is $($*)"
	@$(RM) AMReX_buildInfo.cpp
